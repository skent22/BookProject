@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookProjectRepository>

<table class="table table-sm table-striped table-bordered table-hover">

    <thead>
        <tr>
            <th>Book ID</th>
            <th>Book Title</th>
            <th>Author</th>
        </tr>
    </thead>

    <tbody>
        @if (BookData?.Count() > 0)
        {
            //List Books
            @foreach (Book b in BookData )
            {
                <tr>
                    <td>@b.BookId</td>
                    <td>@b.Title</td>
                    <td>@b.Author</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
                    </td>

                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
                    </td>

                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</button>
                    </td>
                </tr>
                
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Books</td>
            </tr>
        }
    </tbody>

</table>

<NavLink class="btn btn-primary" href="/admin/books/create">Create</NavLink>

@code {
    public IBookProjectRepository repo => Service;

    public IEnumerable<Book> BookData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }

    //View the book details
    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";

    //Edits for the book
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

    //Removes the book
    public async Task RemoveBook (Book b )
    {
        repo.DeleteBook(b);
        await UpdateData();
    }
}
